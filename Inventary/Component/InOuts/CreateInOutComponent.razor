@using Entities
@using Business

<div class="form-group">
    <select class="form-control" @onchange="OnChangeWareHouse">
        <option value="">Selecciones una bondega..</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
        }

    </select>
</div>

<hr />
<EditForm Model="InOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="@InOut.StorageId">
            <option value="">Selecciones un producto..</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }

        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba Cantidad</label>
        <InputNumber class="form-control" @bind-Value="@InOut.Quantity"></InputNumber>
    </div>
    <div class="form-group">
        <label>Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="@InOut.IsInput"></InputCheckbox>
    </div>

    <input class="form-control" type="button" value="@buttonValue" @onclick="SaveInOut" />
</EditForm>

<div class="text-center h4">
    @message
</div>

@code {
    InOutEntity InOut = new InOutEntity();
    //Lista de bido a las relaciones de las tables
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity product = new ProductEntity();
    StorageEntity storage = new StorageEntity();
    //is isOut is true mostrara RegistrarEntreda else RegistrarSalida
    string buttonValue => InOut.IsInput ? "Registrar entrada" : "Registrar salida";

    string message;

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangeWareHouse(ChangeEventArgs e)
    {
        //el 'e' traera el id, por q ese es el value
        var idWareHouse = e.Value.ToString();

        //llamamos la estorage segun el id (porque cada bodega tiene unos productos especificos)

        storages = B_Storage.StorageProductByWarehouse(idWareHouse);
    }

    private void SaveInOut()
    {
        //llamamos a la bodega y el producto del InOut
        storage = storages.LastOrDefault(s => s.StorageId == InOut.StorageId);
        product = storage.Product;



        if (InOut.IsInput)
        {
            storage.PartialQuantity = storage.PartialQuantity + InOut.Quantity;
            B_Storage.UpdateStorage(storage);

            product.TotalQuantity = product.TotalQuantity + InOut.Quantity;
            B_Product.UpdateProduct(product);

            message = "El producto " + product.ProductName+" ha sido actualizad";
        }
        else
        {
            //hacemos esto para que no quede valores negativos
            if (isBiggerThanZero(InOut.Quantity,storage.PartialQuantity))
            {
                storage.PartialQuantity = storage.PartialQuantity - InOut.Quantity;
                B_Storage.UpdateStorage(storage);

                product.TotalQuantity = product.TotalQuantity - InOut.Quantity;
                B_Product.UpdateProduct(product);
                message = "El producto " + product.ProductName + " ha sido actualizad";

            }
            else
            {
                message = "No existe la cantidad sufciente para  " + product.ProductName;

            }

        }
    }

    private bool isBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity>quantity)
        {
            return true;
        }
        return false;
    }
}
