// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Inventary.Component.InOuts
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Inventary\Inventary\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Inventary\Inventary\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Inventary\Inventary\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Inventary\Inventary\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Inventary\Inventary\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Inventary\Inventary\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Inventary\Inventary\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Inventary\Inventary\_Imports.razor"
using Inventary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Component.Ejercicios.BlazorPages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Component.Ejercicios.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Component.Products;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Component.Category;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Component.Warehouse;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Component.Storages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Inventary\Inventary\_Imports.razor"
using Inventary.Component.InOuts;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Inventary\Inventary\Component\InOuts\CreateInOutComponent.razor"
using Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Inventary\Inventary\Component\InOuts\CreateInOutComponent.razor"
using Business;

#line default
#line hidden
#nullable disable
    public partial class CreateInOutComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 43 "D:\Inventary\Inventary\Component\InOuts\CreateInOutComponent.razor"
       
    InOutEntity InOut = new InOutEntity();
    //Lista de bido a las relaciones de las tables
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity product = new ProductEntity();
    StorageEntity storage = new StorageEntity();
    //is isOut is true mostrara RegistrarEntreda else RegistrarSalida
    string buttonValue => InOut.IsInput ? "Registrar entrada" : "Registrar salida";

    string message;

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangeWareHouse(ChangeEventArgs e)
    {
        //el 'e' traera el id, por q ese es el value
        var idWareHouse = e.Value.ToString();

        //llamamos la estorage segun el id (porque cada bodega tiene unos productos especificos)

        storages = B_Storage.StorageProductByWarehouse(idWareHouse);
    }

    private void SaveInOut()
    {
        //llamamos a la bodega y el producto del InOut
        storage = storages.LastOrDefault(s => s.StorageId == InOut.StorageId);
        product = storage.Product;



        if (InOut.IsInput)
        {
            storage.PartialQuantity = storage.PartialQuantity + InOut.Quantity;
            B_Storage.UpdateStorage(storage);

            product.TotalQuantity = product.TotalQuantity + InOut.Quantity;
            B_Product.UpdateProduct(product);

            message = "El producto " + product.ProductName+" ha sido actualizad";
        }
        else
        {
            //hacemos esto para que no quede valores negativos
            if (isBiggerThanZero(InOut.Quantity,storage.PartialQuantity))
            {
                storage.PartialQuantity = storage.PartialQuantity - InOut.Quantity;
                B_Storage.UpdateStorage(storage);

                product.TotalQuantity = product.TotalQuantity - InOut.Quantity;
                B_Product.UpdateProduct(product);
                message = "El producto " + product.ProductName + " ha sido actualizad";

            }
            else
            {
                message = "No existe la cantidad sufciente para  " + product.ProductName;

            }

        }
    }

    private bool isBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity>quantity)
        {
            return true;
        }
        return false;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
